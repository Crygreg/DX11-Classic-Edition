#pragma once
#include "../pch.h"
#include "MyDirect3DDevice7.h"
#include "MyDirect3DVertexBuffer7.h"
#include "../Engine.h"

class MyDirect3D7 : public IDirect3D7 {
public:
	MyDirect3D7( IDirect3D7* direct3d7 ) {
		DebugWrite( "MyDirect3D7::MyDirect3D7\n" );

		Direct3d7 = direct3d7;
		RefCount = 1;
	}

	/*** IUnknown methods ***/
	HRESULT STDMETHODCALLTYPE QueryInterface( REFIID riid, void** ppvObj ) {
		DebugWrite( "MyDirect3D7::QueryInterface\n" );
		return S_OK;
	}

	ULONG STDMETHODCALLTYPE AddRef() {
		DebugWrite( "MyDirect3D7::AddRef\n" );
		return ++RefCount;
	}

	ULONG STDMETHODCALLTYPE Release() {
		DebugWrite( "MyDirect3D7::Release\n" );
		if ( --RefCount == 0 ) {
			delete this;
			return 0;
		}

		return RefCount;
	}

	/*** IDirect3D7 methods ***/
	HRESULT STDMETHODCALLTYPE CreateDevice( REFCLSID rclsid, LPDIRECTDRAWSURFACE7 lpDDS, LPDIRECT3DDEVICE7* lplpD3DDevice ) {
		DebugWrite( "MyDirect3D7::CreateDevice\n" );
		HRESULT hr = S_OK;

		if ( SUCCEEDED( hr ) ) {
			*lplpD3DDevice = new MyDirect3DDevice7( this, nullptr );
		}

		return hr;
	}

	HRESULT STDMETHODCALLTYPE CreateVertexBuffer( LPD3DVERTEXBUFFERDESC lpVBDesc, LPDIRECT3DVERTEXBUFFER7* lplpD3DVertexBuffer, DWORD dwFlags ) {
		DebugWrite( "MyDirect3D7::CreateVertexBuffer\n" );

		// Fake a vertexbuffer
		*lplpD3DVertexBuffer = new MyDirect3DVertexBuffer7( *lpVBDesc );

		return S_OK;
	}

	HRESULT STDMETHODCALLTYPE EnumDevices( LPD3DENUMDEVICESCALLBACK7 lpEnumDevicesCallback, LPVOID lpUserArg ) {
		DebugWrite( "MyDirect3D7::EnumDevices\n" );

        D3DDEVICEDESC7 devDesc;
		ZeroMemory(&devDesc, sizeof(D3DDEVICEDESC7));
		devDesc.dwDevCaps = (D3DDEVCAPS_FLOATTLVERTEX|D3DDEVCAPS_EXECUTESYSTEMMEMORY|D3DDEVCAPS_TLVERTEXSYSTEMMEMORY|D3DDEVCAPS_TEXTUREVIDEOMEMORY|D3DDEVCAPS_DRAWPRIMTLVERTEX
			|D3DDEVCAPS_CANRENDERAFTERFLIP|D3DDEVCAPS_DRAWPRIMITIVES2|D3DDEVCAPS_DRAWPRIMITIVES2EX|D3DDEVCAPS_HWTRANSFORMANDLIGHT|D3DDEVCAPS_HWRASTERIZATION);
		devDesc.dpcLineCaps.dwSize = sizeof(D3DPRIMCAPS);
		devDesc.dpcLineCaps.dwMiscCaps = D3DPMISCCAPS_MASKZ;
		devDesc.dpcLineCaps.dwRasterCaps = (D3DPRASTERCAPS_DITHER|D3DPRASTERCAPS_ZTEST|D3DPRASTERCAPS_SUBPIXEL|D3DPRASTERCAPS_FOGVERTEX|D3DPRASTERCAPS_FOGTABLE
			|D3DPRASTERCAPS_MIPMAPLODBIAS|D3DPRASTERCAPS_ZBIAS|D3DPRASTERCAPS_ANISOTROPY|D3DPRASTERCAPS_WFOG|D3DPRASTERCAPS_ZFOG);
		devDesc.dpcLineCaps.dwZCmpCaps = (D3DPCMPCAPS_NEVER|D3DPCMPCAPS_LESS|D3DPCMPCAPS_EQUAL|D3DPCMPCAPS_LESSEQUAL|D3DPCMPCAPS_GREATER|D3DPCMPCAPS_NOTEQUAL
			|D3DPCMPCAPS_GREATEREQUAL|D3DPCMPCAPS_ALWAYS);
		devDesc.dpcLineCaps.dwSrcBlendCaps = (D3DPBLENDCAPS_ZERO|D3DPBLENDCAPS_ONE|D3DPBLENDCAPS_SRCCOLOR|D3DPBLENDCAPS_INVSRCCOLOR|D3DPBLENDCAPS_SRCALPHA
			|D3DPBLENDCAPS_INVSRCALPHA|D3DPBLENDCAPS_DESTALPHA|D3DPBLENDCAPS_INVDESTALPHA|D3DPBLENDCAPS_DESTCOLOR|D3DPBLENDCAPS_INVDESTCOLOR|D3DPBLENDCAPS_SRCALPHASAT
			|D3DPBLENDCAPS_BOTHSRCALPHA|D3DPBLENDCAPS_BOTHINVSRCALPHA);
		devDesc.dpcLineCaps.dwDestBlendCaps = (D3DPBLENDCAPS_ZERO|D3DPBLENDCAPS_ONE|D3DPBLENDCAPS_SRCCOLOR|D3DPBLENDCAPS_INVSRCCOLOR|D3DPBLENDCAPS_SRCALPHA
			|D3DPBLENDCAPS_INVSRCALPHA|D3DPBLENDCAPS_DESTALPHA|D3DPBLENDCAPS_INVDESTALPHA|D3DPBLENDCAPS_DESTCOLOR|D3DPBLENDCAPS_INVDESTCOLOR|D3DPBLENDCAPS_SRCALPHASAT);
		devDesc.dpcLineCaps.dwAlphaCmpCaps = (D3DPCMPCAPS_NEVER|D3DPCMPCAPS_LESS|D3DPCMPCAPS_EQUAL|D3DPCMPCAPS_LESSEQUAL|D3DPCMPCAPS_GREATER|D3DPCMPCAPS_NOTEQUAL
			|D3DPCMPCAPS_GREATEREQUAL|D3DPCMPCAPS_ALWAYS);
		devDesc.dpcLineCaps.dwShadeCaps = (D3DPSHADECAPS_COLORFLATRGB|D3DPSHADECAPS_COLORGOURAUDRGB|D3DPSHADECAPS_SPECULARFLATRGB|D3DPSHADECAPS_SPECULARGOURAUDRGB
			|D3DPSHADECAPS_ALPHAFLATBLEND|D3DPSHADECAPS_ALPHAGOURAUDBLEND|D3DPSHADECAPS_FOGFLAT|D3DPSHADECAPS_FOGGOURAUD);
		devDesc.dpcLineCaps.dwTextureCaps = (D3DPTEXTURECAPS_PERSPECTIVE|D3DPTEXTURECAPS_ALPHA|D3DPTEXTURECAPS_TRANSPARENCY|D3DPTEXTURECAPS_BORDER
			|D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE|D3DPTEXTURECAPS_CUBEMAP|D3DPTEXTURECAPS_COLORKEYBLEND);
		devDesc.dpcLineCaps.dwTextureFilterCaps = (D3DPTFILTERCAPS_NEAREST|D3DPTFILTERCAPS_LINEAR|D3DPTFILTERCAPS_MIPNEAREST|D3DPTFILTERCAPS_MIPLINEAR
			|D3DPTFILTERCAPS_LINEARMIPNEAREST|D3DPTFILTERCAPS_LINEARMIPLINEAR|D3DPTFILTERCAPS_MINFPOINT|D3DPTFILTERCAPS_MINFLINEAR|D3DPTFILTERCAPS_MINFANISOTROPIC
			|D3DPTFILTERCAPS_MIPFPOINT|D3DPTFILTERCAPS_MIPFLINEAR|D3DPTFILTERCAPS_MAGFPOINT|D3DPTFILTERCAPS_MAGFLINEAR|D3DPTFILTERCAPS_MAGFANISOTROPIC);
		devDesc.dpcLineCaps.dwTextureBlendCaps = (D3DPTBLENDCAPS_DECAL|D3DPTBLENDCAPS_MODULATE|D3DPTBLENDCAPS_DECALALPHA|D3DPTBLENDCAPS_MODULATEALPHA|D3DPTBLENDCAPS_DECALMASK
			|D3DPTBLENDCAPS_MODULATEMASK|D3DPTBLENDCAPS_COPY|D3DPTBLENDCAPS_ADD);
		devDesc.dpcLineCaps.dwTextureAddressCaps = (D3DPTADDRESSCAPS_WRAP|D3DPTADDRESSCAPS_MIRROR|D3DPTADDRESSCAPS_CLAMP|D3DPTADDRESSCAPS_BORDER|D3DPTADDRESSCAPS_INDEPENDENTUV);
		devDesc.dpcTriCaps.dwSize = sizeof(D3DPRIMCAPS);
		devDesc.dpcTriCaps.dwMiscCaps = (D3DPMISCCAPS_MASKZ|D3DPMISCCAPS_CULLNONE|D3DPMISCCAPS_CULLCW|D3DPMISCCAPS_CULLCCW);
		devDesc.dpcTriCaps.dwRasterCaps = (D3DPRASTERCAPS_DITHER|D3DPRASTERCAPS_ZTEST|D3DPRASTERCAPS_SUBPIXEL|D3DPRASTERCAPS_FOGVERTEX|D3DPRASTERCAPS_FOGTABLE
			|D3DPRASTERCAPS_MIPMAPLODBIAS|D3DPRASTERCAPS_ZBIAS|D3DPRASTERCAPS_ANISOTROPY|D3DPRASTERCAPS_WFOG|D3DPRASTERCAPS_ZFOG);
		devDesc.dpcTriCaps.dwZCmpCaps = (D3DPCMPCAPS_NEVER|D3DPCMPCAPS_LESS|D3DPCMPCAPS_EQUAL|D3DPCMPCAPS_LESSEQUAL|D3DPCMPCAPS_GREATER|D3DPCMPCAPS_NOTEQUAL
			|D3DPCMPCAPS_GREATEREQUAL|D3DPCMPCAPS_ALWAYS);
		devDesc.dpcTriCaps.dwSrcBlendCaps = (D3DPBLENDCAPS_ZERO|D3DPBLENDCAPS_ONE|D3DPBLENDCAPS_SRCCOLOR|D3DPBLENDCAPS_INVSRCCOLOR|D3DPBLENDCAPS_SRCALPHA
			|D3DPBLENDCAPS_INVSRCALPHA|D3DPBLENDCAPS_DESTALPHA|D3DPBLENDCAPS_INVDESTALPHA|D3DPBLENDCAPS_DESTCOLOR|D3DPBLENDCAPS_INVDESTCOLOR|D3DPBLENDCAPS_SRCALPHASAT
			|D3DPBLENDCAPS_BOTHSRCALPHA|D3DPBLENDCAPS_BOTHINVSRCALPHA);
		devDesc.dpcTriCaps.dwDestBlendCaps = (D3DPBLENDCAPS_ZERO|D3DPBLENDCAPS_ONE|D3DPBLENDCAPS_SRCCOLOR|D3DPBLENDCAPS_INVSRCCOLOR|D3DPBLENDCAPS_SRCALPHA
			|D3DPBLENDCAPS_INVSRCALPHA|D3DPBLENDCAPS_DESTALPHA|D3DPBLENDCAPS_INVDESTALPHA|D3DPBLENDCAPS_DESTCOLOR|D3DPBLENDCAPS_INVDESTCOLOR|D3DPBLENDCAPS_SRCALPHASAT);
		devDesc.dpcTriCaps.dwAlphaCmpCaps = (D3DPCMPCAPS_NEVER|D3DPCMPCAPS_LESS|D3DPCMPCAPS_EQUAL|D3DPCMPCAPS_LESSEQUAL|D3DPCMPCAPS_GREATER|D3DPCMPCAPS_NOTEQUAL
			|D3DPCMPCAPS_GREATEREQUAL|D3DPCMPCAPS_ALWAYS);
		devDesc.dpcTriCaps.dwShadeCaps = (D3DPSHADECAPS_COLORFLATRGB|D3DPSHADECAPS_COLORGOURAUDRGB|D3DPSHADECAPS_SPECULARFLATRGB|D3DPSHADECAPS_SPECULARGOURAUDRGB
			|D3DPSHADECAPS_ALPHAFLATBLEND|D3DPSHADECAPS_ALPHAGOURAUDBLEND|D3DPSHADECAPS_FOGFLAT|D3DPSHADECAPS_FOGGOURAUD);
		devDesc.dpcTriCaps.dwTextureCaps = (D3DPTEXTURECAPS_PERSPECTIVE|D3DPTEXTURECAPS_ALPHA|D3DPTEXTURECAPS_TRANSPARENCY|D3DPTEXTURECAPS_BORDER
			|D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE|D3DPTEXTURECAPS_CUBEMAP|D3DPTEXTURECAPS_COLORKEYBLEND);
		devDesc.dpcTriCaps.dwTextureFilterCaps = (D3DPTFILTERCAPS_NEAREST|D3DPTFILTERCAPS_LINEAR|D3DPTFILTERCAPS_MIPNEAREST|D3DPTFILTERCAPS_MIPLINEAR
			|D3DPTFILTERCAPS_LINEARMIPNEAREST|D3DPTFILTERCAPS_LINEARMIPLINEAR|D3DPTFILTERCAPS_MINFPOINT|D3DPTFILTERCAPS_MINFLINEAR|D3DPTFILTERCAPS_MINFANISOTROPIC
			|D3DPTFILTERCAPS_MIPFPOINT|D3DPTFILTERCAPS_MIPFLINEAR|D3DPTFILTERCAPS_MAGFPOINT|D3DPTFILTERCAPS_MAGFLINEAR|D3DPTFILTERCAPS_MAGFANISOTROPIC);
		devDesc.dpcTriCaps.dwTextureBlendCaps = (D3DPTBLENDCAPS_DECAL|D3DPTBLENDCAPS_MODULATE|D3DPTBLENDCAPS_DECALALPHA|D3DPTBLENDCAPS_MODULATEALPHA|D3DPTBLENDCAPS_DECALMASK
			|D3DPTBLENDCAPS_MODULATEMASK|D3DPTBLENDCAPS_COPY|D3DPTBLENDCAPS_ADD);
		devDesc.dpcTriCaps.dwTextureAddressCaps = (D3DPTADDRESSCAPS_WRAP|D3DPTADDRESSCAPS_MIRROR|D3DPTADDRESSCAPS_CLAMP|D3DPTADDRESSCAPS_BORDER|D3DPTADDRESSCAPS_INDEPENDENTUV);
		devDesc.dwDeviceRenderBitDepth = 1280;
		devDesc.dwDeviceZBufferBitDepth = 1536;
		devDesc.dwMinTextureWidth = 1;
		devDesc.dwMinTextureHeight = 1;
		devDesc.dwMaxTextureWidth = 16384;
		devDesc.dwMaxTextureHeight = 16384;
		devDesc.dwMaxTextureRepeat = 32768;
		devDesc.dwMaxTextureAspectRatio = 32768;
		devDesc.dwMaxAnisotropy = 16;
		devDesc.dvGuardBandLeft = -16384.0f;
		devDesc.dvGuardBandTop = -16384.0f;
		devDesc.dvGuardBandRight = 16384.0f;
		devDesc.dvGuardBandBottom = 16384.0f;
		devDesc.dvExtentsAdjust = 0.0f;
		devDesc.dwStencilCaps = (D3DSTENCILCAPS_KEEP|D3DSTENCILCAPS_ZERO|D3DSTENCILCAPS_REPLACE|D3DSTENCILCAPS_INCRSAT|D3DSTENCILCAPS_DECRSAT|D3DSTENCILCAPS_INVERT
			|D3DSTENCILCAPS_INCR|D3DSTENCILCAPS_DECR);
		devDesc.dwFVFCaps = (D3DFVFCAPS_DONOTSTRIPELEMENTS|8);
		devDesc.dwTextureOpCaps = (D3DTEXOPCAPS_DISABLE|D3DTEXOPCAPS_SELECTARG1|D3DTEXOPCAPS_SELECTARG2|D3DTEXOPCAPS_MODULATE|D3DTEXOPCAPS_MODULATE2X|D3DTEXOPCAPS_MODULATE4X
			|D3DTEXOPCAPS_ADD|D3DTEXOPCAPS_ADDSIGNED|D3DTEXOPCAPS_ADDSIGNED2X|D3DTEXOPCAPS_SUBTRACT|D3DTEXOPCAPS_ADDSMOOTH|D3DTEXOPCAPS_BLENDDIFFUSEALPHA|D3DTEXOPCAPS_BLENDTEXTUREALPHA
			|D3DTEXOPCAPS_BLENDFACTORALPHA|D3DTEXOPCAPS_BLENDTEXTUREALPHAPM|D3DTEXOPCAPS_BLENDCURRENTALPHA|D3DTEXOPCAPS_PREMODULATE|D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR
			|D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA|D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR|D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA|D3DTEXOPCAPS_BUMPENVMAP|D3DTEXOPCAPS_BUMPENVMAPLUMINANCE
			|D3DTEXOPCAPS_DOTPRODUCT3);
		devDesc.wMaxTextureBlendStages = 4;
		devDesc.wMaxSimultaneousTextures = 4;
		devDesc.dwMaxActiveLights = 8;
		devDesc.dvMaxVertexW = 10000000000.0f;
		devDesc.deviceGUID = {0xF5049E78, 0x4861, 0x11D2, {0xA4, 0x07, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8}};
		devDesc.wMaxUserClipPlanes = 6;
		devDesc.wMaxVertexBlendMatrices = 4;
		devDesc.dwVertexProcessingCaps = (D3DVTXPCAPS_TEXGEN|D3DVTXPCAPS_MATERIALSOURCE7|D3DVTXPCAPS_DIRECTIONALLIGHTS|D3DVTXPCAPS_POSITIONALLIGHTS|D3DVTXPCAPS_LOCALVIEWER);

		// Pass it to the callback function
        char name[256] = "DirectX11";
        if ( Engine::GraphicsEngine ) {
            (*lpEnumDevicesCallback)(const_cast<char*>(Engine::GraphicsEngine->GetGraphicsDeviceName().c_str()), name, &devDesc, lpUserArg);
        } else {
            char desc[256] = "DirectX11";
            (*lpEnumDevicesCallback)(desc, name, &devDesc, lpUserArg);
        }
		return S_OK;
	}

	HRESULT STDMETHODCALLTYPE EvictManagedTextures() {
		DebugWrite( "MyDirect3D7::EvictManagedTextures\n" );
		return S_OK;
	}

	HRESULT STDMETHODCALLTYPE EnumZBufferFormats( REFCLSID riidDevice, LPD3DENUMPIXELFORMATSCALLBACK lpEnumCallback, LPVOID lpContext ) {
		DebugWrite( "MyDirect3D7::EnumZBufferFormats\n" );

        static std::array<DDPIXELFORMAT, 4> zformats = { {
            {32, DDPF_ZBUFFER, 0, 16, 0x00, 0xFFFF, 0x00, 0x00},
            {32, DDPF_ZBUFFER, 0, 24, 0x00, 0xFFFFFF, 0x00, 0x00},
            {32, DDPF_ZBUFFER, 0, 32, 0x00, 0xFFFFFF, 0x00, 0x00},
            {32, DDPF_STENCILBUFFER | DDPF_ZBUFFER, 0, 32, 0x08, 0xFFFFFF, 0xFF000000, 0x00},
        } };

        for ( DDPIXELFORMAT& ppf : zformats )
            (*lpEnumCallback)(&ppf, lpContext);

		return S_OK;
	}

private:
	IDirect3D7* Direct3d7;
	int RefCount;
};

